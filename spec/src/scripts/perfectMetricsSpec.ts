import {Io} from "@sagittal/general"
import {onlyRunInCi} from "../../helpers/shared/onlyRunInCi"
import {runScriptAndGetConsoleOutput} from "../../helpers/shared/scripts/runScriptAndGetConsoleOutput"

describe("perfect-metrics", (): void => {
    const expected = [
        ``,
        ``,
        `THE PERFECTED METRICS ARE {`,
        `    "{},{sum,useNuminator}": {`,
        `        sumOfSquares: 0.014206086754420309,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.USE_NUMINATOR ]: true`,
        `            }`,
        `        ],`,
        `        name: "{},{sum,useNuminator}"`,
        `    },`,
        `    "{},{aAsCoefficient,sum}": {`,
        `        sumOfSquares: 0.014206086754420309,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.A_AS_COEFFICIENT ]: 0.1061111111111111`,
        `            }`,
        `        ],`,
        `        name: "{},{aAsCoefficient,sum}"`,
        `    },`,
        `    "{},{aAsPowerExponent,sum}": {`,
        `        sumOfSquares: 0.014047121378233201,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.A_AS_POWER_EXPONENT ]: 1.1644915254237294`,
        `            }`,
        `        ],`,
        `        name: "{},{aAsPowerExponent,sum}"`,
        `    },`,
        `    "{},{sum,x}": {`,
        `        sumOfSquares: 0.013983040590027893,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.X ]: 0.5543220338983049`,
        `            }`,
        `        ],`,
        `        name: "{},{sum,x}"`,
        `    },`,
        `    "{},{sum,w}": {`,
        `        sumOfSquares: 0.013983040590027893,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.W ]: 0.5543220338983049`,
        `            }`,
        `        ],`,
        `        name: "{},{sum,w}"`,
        `    },`,
        `    "{},{aAsLogarithmBase,aAsPowerExponent,sum}": {`,
        `        sumOfSquares: 0.013162605298940203,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.A_AS_LOGARITHM_BASE ]: 2,`,
        `                [ PopularityParameterId.A_AS_POWER_EXPONENT ]: 2.3848305084745762`,
        `            }`,
        `        ],`,
        `        name: "{},{aAsLogarithmBase,aAsPowerExponent,sum}"`,
        `    },`,
        `    "{},{aAsLogarithmBase,sum,w}": {`,
        `        sumOfSquares: 0.012380906299586478,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.A_AS_LOGARITHM_BASE ]: 2,`,
        `                [ PopularityParameterId.W ]: -1.672966101694915`,
        `            }`,
        `        ],`,
        `        name: "{},{aAsLogarithmBase,sum,w}"`,
        `    },`,
        `    "{},{kAsPowerExponent,sum}": {`,
        `        sumOfSquares: 0.011924964168837053,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.K_AS_POWER_EXPONENT ]: 0.9711016949152543`,
        `            }`,
        `        ],`,
        `        name: "{},{kAsPowerExponent,sum}"`,
        `    },`,
        `    "{},{jAsCoefficient,sum}": {`,
        `        sumOfSquares: 0.011916916032003604,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.J_AS_COEFFICIENT ]: 1.005`,
        `            }`,
        `        ],`,
        `        name: "{},{jAsCoefficient,sum}"`,
        `    },`,
        `    "{},{jAsPowerExponent,sum}": {`,
        `        sumOfSquares: 0.009591240907070654,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.J_AS_POWER_EXPONENT ]: 1.0727966101694915`,
        `            }`,
        `        ],`,
        `        name: "{},{jAsPowerExponent,sum}"`,
        `    },`,
        `    "{},{kAsCoefficient,sum}": {`,
        `        sumOfSquares: 0.009497103516271052,`,
        `        submetrics: [`,
        `            {`,
        `                [ PopularityParameterId.SUM ]: true,`,
        `                [ PopularityParameterId.K_AS_COEFFICIENT ]: 0.7727777777777778`,
        `            }`,
        `        ],`,
        `        name: "{},{kAsCoefficient,sum}"`,
        `    }`,
        `}`,
        `MAX UNIT 0.01`,
        `Z -1`,
        `ONLY TOP 80`,
    ] as Io[]

    it("takes the best metrics that were found per metric name, relatively roughly best, and then recursively searches local minima with an initial search space subdividing resolution an order of magnitude smaller than the best metrics search, until it finds the perfect metric for each best metric", (): void => {
        onlyRunInCi()
        const script = "npm run perfect-metrics -- --log-targets final" as Io

        const actual = runScriptAndGetConsoleOutput(script)

        expect(actual).toEqual(expected)
    })

    it("works in sync mode too", (): void => {
        onlyRunInCi()
        const script = "npm run perfect-metrics -- --log-targets final --sync" as Io

        const actual = runScriptAndGetConsoleOutput(script)

        expect(actual).toEqual(expected)
    })
})
